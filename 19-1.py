# 46 아기상어 - 2020 삼전기출

# N x N 크기의 공간에 물고기 M마리와 아기상어 1마리가 있습니다. 공간은 1 x 1 크기의 정사각형으로 
# 나누어져 있습니다. 한 칸에는 물고기가 최대 1마리 존재합니다. 아기 상어와 물고기는 모두
# 크기를 가지고 있고, 이 크기는 자연수입니다. 가장 처음에 아기상어의 크기는 2이고, 아기상어는
# 1초에 상하좌우로 인접한 한 칸씩 이동합니다.
# 아기상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 
# 있습니다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있습니다. 따라서 크기가 같은 물고기는
# 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있습니다. 아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같습니다.

# -더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청합니다.
# -먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 갑니다.
# -먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 갑니다.
# --거리는 아기상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야 하는 칸의 개수의 최솟값입니다.
# --거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러 마리라면, 가장 왼쪽에 있는 물고기를 먹습니다.

# 아기상어의 이동은 1초가 걸리고, 물고기가 걸리는 시간은 없다고 가정합니다. 즉 아기상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면,
# 이동과 동시에 물고기를 먹습니다. 물고기를 먹으면, 그 칸은 빈칸이 됩니다.
# 아기상어는 자신의 크기와 같은 수의 물고기를 먹을 때마다 크기가 1 증가하는데 예를 들어, 크기가 2인 아기상어는 물고기를 2마리 먹으면 크기가 3이 됩니다.
# 공간의 상태가 주어졌을 때, 아기 상어가 몇 초동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 구하시오.

### 입력 예시1
# 3
# 0 0 0
# 0 0 0
# 0 9 0
### 출력 예시1
# 0

### 입력 예시2
# 3
# 0 0 1
# 0 0 0
# 0 9 0
# ## 출력 예시2
# 3

### 입력 예시3
# 4
# 4 3 2 1
# 0 0 0 0
# 0 0 9 0
# 1 2 3 4
### 출력 예시3
# 14

from collections import deque
INF = 1e9 # 무한을 의미하는 값으로 10억을 설정

# 맵의 크기 N 입력
n = int(input())

# 전체 모든 칸에 대한 정보 입력
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 아기 상어의 현재 크기 변수와 현재 위치 변수
now_size = 2
now_x, now_y = 0, 0

# 아기 상어의 시작 위치를 찾은 뒤에 그 위치엔 아무것도 없다고 처리
for i in range(n):
    for j in range(n):
        if array[i][j] == 9:
            now_x, now_y = i, j
            array[now_x][now_y] = 0

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 모든 위치까지의 '최단 거리만' 계산하는 BFS 함수
def bfs():
    # 값이 -1이라면 도달할 수 없다는 의미 (초기화)
    dist = [[-1] * n for _ in range(n)]
    # 시작 위치는 도달이 가능하다고 보며 거리는 0
    q = deque([(now_x, now_y)])
    dist[now_x][now_y] = 0
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx and nx < n and 0 <= ny and ny < n:
                # 자신의 크기보다 작거나 같은 경우에 지나갈 수 있음
                if dist[nx][ny] == -1 and array[nx][ny] <= now_size:
                    dist[nx][ny] = dist[x][y] + 1
                    q.append((nx, ny))
    # 모든 위치까지의 최단 거리 테이블 반환
    return dist

# 최단 거리 테이블이 주어졌을 때, 먹을 물고기를 찾는 함수
def find(dist):
    x, y = 0, 0
    min_dist = INF
    for i in range(n):
        for j in range(n):
            # 도달이 가능하면서 먹을 수 있는 물고기일 때
            if dist[i][j] != -1 and 1 <= array[i][j] and array[i][j] < now_size:
                # 가장 가까운 물고기 한 마리만 선택
                if dist[i][j] < min_dist:
                    x, y = i, j
                    min_dist = dist[i][j]
    if min_dist == INF: # 먹을 수 있는 물고기가 없는 경우
        return None
    else:
        return x, y, min_dist # 먹을 물고기의 위치와 최단 거리

result = 0 # 최종 답안
ate = 0 # 현재 크기에서 먹은 양

while True:
    # 먹을 수 있는 물고기의 위치 찾기
    value = find(bfs())
    # 먹을 수 있는 물고기가 없는 경우, 현재까지 움직인 거리 출력
    if value == None:
        print(result)
        break
    else:
        # 현재 위치 갱신 및 이동 거리 변경
        now_x, now_y = value[0], value[1]
        result += value[2]
        # 먹은 위치에는 이제 아무것도 없도록 처리
        array[now_x][now_y] = 0
        ate += 1
        # 자신의 현재 크기 이상으로 먹은 경우, 크기 증가
        if ate >= now_size:
            now_size += 1
            ate = 0