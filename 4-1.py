# # 4-1 상하좌우

# 여행가 A는 N x N 크기의 정사각형 공간위에 서 있다. 이 공간은 1 x 1 크기의 정사각형으로 나누어져있다.
# 가장 ㅏ왼쪽 위 좌표는 (1, 1) 이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당한다.
# 여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1,1)이다.
# 우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여있다.
# 계획서에는 하나의 줄에 띄어쓰기를 기준으로하여 L, R, U ,D 중 하나의 문자가 반복적으로 적혀있다.
# 각 문자의 의미는 다음과 같다
# L: 왼쪽 한칸이동
# R: 오른쪽 한칸이동
# U: 위 한칸이동
# D: 아래 한칸이동
# 이 때 여행가 A가 N x N 크기의 정사각형 공간을 벗어나는 움직임은 무시된다.
# 예를들어 (1, 1)의 위치에서 L 혹은 U를 만나면 무시된다. 다음은 N = 5인 지도와 계획서이다.
# 이 경우 6개 명령에 따라서 여행가가 움직이게 되는 위치는 순서대로 
# (1,2),(1,3),(1,4),(1,4),(2,4),(3,4)이므로, 최종적으로 여행가 A가 도착하게 되는 좌표는 (3,4)이다.
# 다시말해 3행 4열의 위치에 해당하므로 (3,4)라고 적는다. 계획서가 주어졌을때 여행가 A가 최종적으로 도착할 지점의 좌표를 출력하는 프로그램을 작성하시오

# 입력예시
# 5
# R R R U D D 

# 출력예시
# 3 4

n = int(input())
x, y = 1, 1
plans = input().split()

# L, R, U, D에 따른 이동 방향
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L','R','U','D']

# 이동 계획을 하니씩 확인
for plan in plans:
    #이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue;
    #이동 수행
    x, y = nx, ny

print(x, y)